import { supabase } from '../lib/supabase';
import { NOTIFICATION_TYPES, isNotificationEnabled } from '../config/notificationConfig';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
export interface MassNotificationRequest {
  title: string;
  body: string;
  data?: any;
  targetAudience: 'all' | 'ios' | 'android' | 'custom';
  customUserIds?: string[];
  scheduledAt?: string; // ISO –¥–∞—Ç–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  notificationType?: keyof typeof NOTIFICATION_TYPES;
}

export interface NotificationStats {
  totalUsers: number;
  sentCount: number;
  failedCount: number;
  deliveredCount: number;
  openedCount: number;
}

class MassNotificationService {
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  async sendToAll(
    title: string, 
    body: string, 
    data?: any,
    notificationType?: keyof typeof NOTIFICATION_TYPES
  ): Promise<NotificationStats> {
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (notificationType && !isNotificationEnabled(notificationType)) {
      throw new Error(`–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${notificationType} –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
    }

    return this.sendMassNotification({
      title,
      body,
      data,
      targetAudience: 'all',
      notificationType
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
   */
  async sendByPlatform(
    platform: 'ios' | 'android',
    title: string,
    body: string,
    data?: any
  ): Promise<NotificationStats> {
    return this.sendMassNotification({
      title,
      body,
      data,
      targetAudience: platform
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  async sendToUsers(
    userIds: string[],
    title: string,
    body: string,
    data?: any
  ): Promise<NotificationStats> {
    return this.sendMassNotification({
      title,
      body,
      data,
      targetAudience: 'custom',
      customUserIds: userIds
    });
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  async scheduleNotification(
    scheduledAt: Date,
    title: string,
    body: string,
    targetAudience: 'all' | 'ios' | 'android' = 'all',
    data?: any
  ): Promise<{ scheduled: boolean; scheduledId: string }> {
    
    const scheduledNotification = {
      title,
      body,
      data,
      target_audience: targetAudience,
      scheduled_at: scheduledAt.toISOString(),
      status: 'scheduled',
      created_at: new Date().toISOString()
    };

    const { data: result, error } = await supabase
      .from('scheduled_notifications')
      .insert(scheduledNotification)
      .select('id')
      .single();

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    }

    return {
      scheduled: true,
      scheduledId: result.id
    };
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  private async sendMassNotification(request: MassNotificationRequest): Promise<NotificationStats> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É:', request);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const tokens = await this.getTargetTokens(request);
      
      if (tokens.length === 0) {
        return {
          totalUsers: 0,
          sentCount: 0,
          failedCount: 0,
          deliveredCount: 0,
          openedCount: 0
        };
      }

      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –ø–æ 100 —Ç–æ–∫–µ–Ω–æ–≤ (–ª–∏–º–∏—Ç Expo Push API)
      const batches = this.chunkArray(tokens, 100);
      let totalSent = 0;
      let totalFailed = 0;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–∞–º–∏
      for (const batch of batches) {
        const batchResult = await this.sendBatch(batch, request);
        totalSent += batchResult.sent;
        totalFailed += batchResult.failed;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.saveNotificationStats({
        title: request.title,
        body: request.body,
        target_audience: request.targetAudience,
        total_users: tokens.length,
        sent_count: totalSent,
        failed_count: totalFailed,
        created_at: new Date().toISOString()
      });

      console.log('‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
        totalUsers: tokens.length,
        sent: totalSent,
        failed: totalFailed
      });

      return {
        totalUsers: tokens.length,
        sentCount: totalSent,
        failedCount: totalFailed,
        deliveredCount: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
        openedCount: 0     // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
   */
  private async getTargetTokens(request: MassNotificationRequest): Promise<any[]> {
    let query = supabase
      .from('push_tokens')
      .select('token, platform, user_id')
      .gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    switch (request.targetAudience) {
      case 'ios':
        query = query.eq('platform', 'ios');
        break;
      case 'android':
        query = query.eq('platform', 'android');
        break;
      case 'custom':
        if (request.customUserIds && request.customUserIds.length > 0) {
          query = query.in('user_id', request.customUserIds);
        } else {
          return [];
        }
        break;
      case 'all':
      default:
        // –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        break;
    }

    const { data: tokens, error } = await query;

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }

    return tokens || [];
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private async sendBatch(
    tokens: any[], 
    request: MassNotificationRequest
  ): Promise<{ sent: number; failed: number }> {
    
    const messages = tokens.map(tokenData => ({
      to: tokenData.token,
      title: request.title,
      body: request.body,
      data: {
        ...request.data,
        userId: tokenData.user_id,
        platform: tokenData.platform,
        massNotification: true
      },
      sound: 'default',
      badge: 1
    }));

    try {
      const response = await fetch('https://exp.host/--/api/v2/push/send', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Accept-encoding': 'gzip, deflate',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(messages),
      });

      const result = await response.json();
      
      let sent = 0;
      let failed = 0;

      if (Array.isArray(result.data)) {
        result.data.forEach((res: any) => {
          if (res.status === 'ok') {
            sent++;
          } else {
            failed++;
          }
        });
      }

      return { sent, failed };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–∞:', error);
      return { sent: 0, failed: tokens.length };
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private async saveNotificationStats(stats: any): Promise<void> {
    try {
      const { error } = await supabase
        .from('notification_stats')
        .insert(stats);

      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –†–∞–∑–±–∏–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –±–∞—Ç—á–∏
   */
  private chunkArray<T>(array: T[], chunkSize: number): T[][] {
    const chunks: T[][] = [];
    for (let i = 0; i < array.length; i += chunkSize) {
      chunks.push(array.slice(i, i + chunkSize));
    }
    return chunks;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
   */
  async getNotificationStats(limit: number = 10): Promise<any[]> {
    const { data, error } = await supabase
      .from('notification_stats')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(limit);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return [];
    }

    return data || [];
  }

  /**
   * –û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async cancelScheduledNotification(scheduledId: string): Promise<boolean> {
    try {
      const { error } = await supabase
        .from('scheduled_notifications')
        .update({ status: 'cancelled' })
        .eq('id', scheduledId);

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        return false;
      }

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
   */
  getQuickTemplates() {
    return {
      // –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏
      promotion: (discount: string, description: string) => ({
        title: `üéÅ –°–∫–∏–¥–∫–∞ ${discount}!`,
        body: description,
        data: { type: 'PROMOTION', discount }
      }),

      // –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      maintenance: (startTime: string, duration: string) => ({
        title: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
        body: `–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ ${startTime}. –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}`,
        data: { type: 'SYSTEM_UPDATE', maintenance: true }
      }),

      // –ù–æ–≤—ã–µ —É—Å–ª—É–≥–∏
      newService: (serviceName: string) => ({
        title: 'üÜï –ù–æ–≤–∞—è —É—Å–ª—É–≥–∞!',
        body: `–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ —É—Å–ª—É–≥–∞: ${serviceName}. –ó–∞–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`,
        data: { type: 'PROMOTION', newService: serviceName }
      }),

      // –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
      holiday: (holidayName: string) => ({
        title: `üéâ –° ${holidayName}!`,
        body: `–ö–æ–º–∞–Ω–¥–∞ DoctorDom –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç –≤–∞—Å —Å ${holidayName}! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è –∏ —É—é—Ç–∞ –≤ –¥–æ–º–µ!`,
        data: { type: 'PROMOTION', holiday: holidayName }
      })
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const massNotificationService = new MassNotificationService(); 