// Google Maps API —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤

interface GoogleMapsGeocodeResult {
  address_components: Array<{
    long_name: string;
    short_name: string;
    types: string[];
  }>;
  formatted_address: string;
  geometry: {
    location: {
      lat: number;
      lng: number;
    };
    location_type: string;
    viewport: {
      northeast: { lat: number; lng: number };
      southwest: { lat: number; lng: number };
    };
  };
  place_id: string;
  types: string[];
}

interface GoogleMapsGeocodeResponse {
  results: GoogleMapsGeocodeResult[];
  status: string;
}

interface Address {
  id: string;
  description: string;
  latitude: number;
  longitude: number;
}

class GoogleMapsService {
  private apiKey: string;
  private baseUrl = 'https://maps.googleapis.com/maps/api';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  // –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
  async searchAddresses(query: string, region: { latitude: number; longitude: number }): Promise<Address[]> {
    if (query.trim().length < 3) {
      return [];
    }

    try {
      const location = `${region.latitude},${region.longitude}`;
      const url = `${this.baseUrl}/geocode/json?address=${encodeURIComponent(query)}&location=${location}&radius=50000&language=ru&key=${this.apiKey}`;
      
      const response = await fetch(url);
      const data: GoogleMapsGeocodeResponse = await response.json();

      if (data.status === 'OK' && data.results.length > 0) {
        return data.results.slice(0, 5).map((result, index) => ({
          id: result.place_id || `result_${index}`,
          description: result.formatted_address,
          latitude: result.geometry.location.lat,
          longitude: result.geometry.location.lng,
        }));
      }

      return [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–æ–≤:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤');
    }
  }

  // –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)
  async reverseGeocode(latitude: number, longitude: number): Promise<Address | null> {
    try {
      // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
      const url = `${this.baseUrl}/geocode/json?latlng=${latitude},${longitude}&language=ru&result_type=street_address|premise|subpremise&key=${this.apiKey}`;
      
      console.log('üåç –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', latitude, longitude);
      
      const response = await fetch(url);
      const data: GoogleMapsGeocodeResponse = await response.json();

      console.log('üìç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', data.status, '–ù–∞–π–¥–µ–Ω–æ:', data.results?.length || 0);

      if (data.status === 'OK' && data.results.length > 0) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        let bestResult = null;
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å (street_address)
        for (const result of data.results) {
          console.log('üè† –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', result.types);
          console.log('üìù –ê–¥—Ä–µ—Å:', result.formatted_address);
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Plus Codes –∏ –Ω–µ—Ç–æ—á–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
          if (result.formatted_address.includes('+') || 
              result.types.includes('plus_code')) {
            console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Plus Code');
            continue;
          }
          
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ—á–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º
          if (result.types.includes('street_address') || 
              result.types.includes('premise') ||
              result.types.includes('subpremise')) {
            bestResult = result;
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å');
            break;
          }
          
          // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
          if (!bestResult && !result.types.includes('political')) {
            bestResult = result;
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å, –¥–µ–ª–∞–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if (!bestResult || bestResult.formatted_address.includes('+')) {
          console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
          const fallbackUrl = `${this.baseUrl}/geocode/json?latlng=${latitude},${longitude}&language=ru&key=${this.apiKey}`;
          
          const fallbackResponse = await fetch(fallbackUrl);
          const fallbackData: GoogleMapsGeocodeResponse = await fallbackResponse.json();
          
          if (fallbackData.status === 'OK' && fallbackData.results.length > 0) {
            // –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ Plus Code
            bestResult = fallbackData.results.find(result => 
              !result.formatted_address.includes('+') && 
              !result.types.includes('plus_code')
            ) || fallbackData.results[0];
          }
        }
        
        if (bestResult) {
          console.log('üéØ –ò—Ç–æ–≥–æ–≤—ã–π –∞–¥—Ä–µ—Å:', bestResult.formatted_address);
          return {
            id: bestResult.place_id || 'current',
            description: bestResult.formatted_address,
            latitude: bestResult.geometry.location.lat,
            longitude: bestResult.geometry.location.lng,
          };
        }
      }

      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–¥—Ä–µ—Å');
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
    }
  }

  // –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º (Places API)
  async searchPlaces(query: string, region: { latitude: number; longitude: number }): Promise<Address[]> {
    console.log('üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç:', query);
    
    if (query.trim().length < 3) {
      console.log('‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
      return [];
    }

    try {
      const location = `${region.latitude},${region.longitude}`;
      const url = `${this.baseUrl}/place/autocomplete/json?input=${encodeURIComponent(query)}&location=${location}&radius=50000&language=ru&components=country:ru&key=${this.apiKey}`;
      
      console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', url.replace(this.apiKey, 'API_KEY_HIDDEN'));
      
      const response = await fetch(url);
      const data = await response.json();

      console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç API:', data.status, '–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', data.predictions?.length || 0);

      if (data.status === 'OK' && data.predictions.length > 0) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        const detailedResults = await Promise.all(
          data.predictions.slice(0, 5).map(async (prediction: any) => {
            return await this.getPlaceDetails(prediction.place_id);
          })
        );

        const filteredResults = detailedResults.filter(result => result !== null) as Address[];
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤:', filteredResults.length);
        return filteredResults;
      }

      console.log('‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞ API:', data.status);
      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –º–µ—Å—Ç–∞ –ø–æ place_id
  private async getPlaceDetails(placeId: string): Promise<Address | null> {
    try {
      const url = `${this.baseUrl}/place/details/json?place_id=${placeId}&fields=formatted_address,geometry&language=ru&key=${this.apiKey}`;
      
      const response = await fetch(url);
      const data = await response.json();

      if (data.status === 'OK' && data.result) {
        const result = data.result;
        return {
          id: placeId,
          description: result.formatted_address,
          latitude: result.geometry.location.lat,
          longitude: result.geometry.location.lng,
        };
      }

      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –º–µ—Å—Ç–∞:', error);
      return null;
    }
  }

  // –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç –≤ —Ä–∞–¥–∏—É—Å–µ (–¥–ª—è –Ω–µ—Ç–æ—á–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏)
  async searchNearbyPlaces(latitude: number, longitude: number, radius: number = 500): Promise<Address[]> {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç –≤ —Ä–∞–¥–∏—É—Å–µ', radius, '–º–µ—Ç—Ä–æ–≤');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º
      const url = `${this.baseUrl}/geocode/json?latlng=${latitude},${longitude}&language=ru&key=${this.apiKey}`;
      
      const response = await fetch(url);
      const data: GoogleMapsGeocodeResponse = await response.json();

      if (data.status === 'OK' && data.results.length > 0) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const places = data.results
          .filter(result => 
            !result.formatted_address.includes('+') && 
            !result.types.includes('plus_code') &&
            (result.types.includes('street_address') || 
             result.types.includes('premise') ||
             result.types.includes('establishment'))
          )
          .slice(0, 5)
          .map((result, index) => ({
            id: result.place_id || `nearby_${index}`,
            description: result.formatted_address,
            latitude: result.geometry.location.lat,
            longitude: result.geometry.location.lng,
          }));

        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç:', places.length);
        return places;
      }

      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç:', error);
      return [];
    }
  }
}

// Singleton instance
let googleMapsService: GoogleMapsService | null = null;

export const initializeGoogleMapsService = (apiKey: string) => {
  console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Maps Service...');
  console.log('üîë API Key:', apiKey ? `${apiKey.substring(0, 10)}...` : '–ù–ï –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù');
  googleMapsService = new GoogleMapsService(apiKey);
  console.log('‚úÖ Google Maps Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
};

export const getGoogleMapsService = (): GoogleMapsService => {
  if (!googleMapsService) {
    throw new Error('Google Maps Service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initializeGoogleMapsService —Å–Ω–∞—á–∞–ª–∞.');
  }
  return googleMapsService;
};

export { GoogleMapsService };
export type { Address }; 