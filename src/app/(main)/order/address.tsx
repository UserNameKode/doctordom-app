import React, { useState, useEffect } from 'react';
import { View, StyleSheet, TextInput as RNTextInput, TouchableOpacity, Alert, ActivityIndicator, ScrollView, Platform } from 'react-native';
import { Text, Button, List, Divider, Portal, Modal } from 'react-native-paper';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useRoute, useNavigation, RouteProp } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import * as Location from 'expo-location';
import appTheme from '../../../constants/theme';
import { ServiceStackParamList } from '../services/_layout';
import { getUserSavedAddresses, saveUserAddress, SavedAddress } from '../../../lib/supabase';
import { getGoogleMapsService, initializeGoogleMapsService, Address } from '../../../utils/googleMapsService';
import { GOOGLE_MAPS_API_KEY_CONFIG, DEFAULT_REGION } from '../../../constants/config';
import { getFastLocation, preloadLocation } from '../../../utils/fastLocationUtils';
import { getQualityLocation, getQuickLocation } from '../../../utils/qualityLocationUtils';
// LocationAccuracy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–±—Ä–∞–Ω –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

type OrderAddressRouteProp = RouteProp<ServiceStackParamList, 'OrderAddress'>;
type OrderAddressNavigationProp = StackNavigationProp<ServiceStackParamList, 'OrderDetails'>;

/**
 * –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
 */
const OrderAddressScreen = () => {  const route = useRoute<OrderAddressRouteProp>();  const navigation = useNavigation<OrderAddressNavigationProp>();  const { serviceId, specialistId } = route.params;
  
  const [isLoading, setIsLoading] = useState(true);
  const [isLoadingLocation, setIsLoadingLocation] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<Address[]>([]);
  const [savedAddresses, setSavedAddresses] = useState<SavedAddress[]>([]);
  const [selectedAddress, setSelectedAddress] = useState<Address | null>(null);
  const [region, setRegion] = useState({
    latitude: 55.7558, // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    longitude: 37.6176,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
  const [showManualAddressModal, setShowManualAddressModal] = useState(false);
  const [manualAddressCity, setManualAddressCity] = useState('');
  const [manualAddressStreet, setManualAddressStreet] = useState('');
  const [manualAddressHouse, setManualAddressHouse] = useState('');
  const [manualAddressApartment, setManualAddressApartment] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ GPS —É–±—Ä–∞–Ω–æ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
  useEffect(() => {
    const initializeScreen = async () => {
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Maps Service
        initializeGoogleMapsService(GOOGLE_MAPS_API_KEY_CONFIG);
        
        // –¢–æ–ª—å–∫–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const { status } = await Location.requestForegroundPermissionsAsync();
        
        if (status !== 'granted') {
          console.log('‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–µ —Ö–æ—Ç–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPS
        } else {
          console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–æ');
          // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        await loadSavedAddresses();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞:', error);
      } finally {
        setIsLoading(false);
      }
    };

    initializeScreen();
  }, []);

  // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (6 —Å–µ–∫—É–Ω–¥)
  const getLocationQuick = async () => {
    setIsLoadingLocation(true);
    
    try {
      const { status } = await Location.getForegroundPermissionsAsync();
      
      if (status !== 'granted') {
        const { status: newStatus } = await Location.requestForegroundPermissionsAsync();
        if (newStatus !== 'granted') {
          showPermissionAlert();
          return;
        }
      }
      
      console.log('‚ö° –ë—ã—Å—Ç—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
      const result = await getQuickLocation();
      await handleLocationResult(result);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', error);
      handleLocationError(error as Error);
    } finally {
      setIsLoadingLocation(false);
    }
  };

  // –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–¥–æ 30 —Å–µ–∫—É–Ω–¥, —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ 50–º)
  const getLocationQuality = async () => {
    setIsLoadingLocation(true);
    
    try {
      const { status } = await Location.getForegroundPermissionsAsync();
      
      if (status !== 'granted') {
        const { status: newStatus } = await Location.requestForegroundPermissionsAsync();
        if (newStatus !== 'granted') {
          showPermissionAlert();
          return;
        }
      }
      
      console.log('üéØ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
      const result = await getQualityLocation(50, 30000); // 50–º —Ç–æ—á–Ω–æ—Å—Ç—å, 30—Å –º–∞–∫—Å–∏–º—É–º
      await handleLocationResult(result);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', error);
      handleLocationError(error as Error);
    } finally {
      setIsLoadingLocation(false);
    }
  };

  // –¢–æ—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–¥–æ 45 —Å–µ–∫—É–Ω–¥, —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ 20–º)
  const getLocationPrecise = async () => {
    setIsLoadingLocation(true);
    
    try {
      const { status } = await Location.getForegroundPermissionsAsync();
      
      if (status !== 'granted') {
        const { status: newStatus } = await Location.requestForegroundPermissionsAsync();
        if (newStatus !== 'granted') {
          showPermissionAlert();
          return;
        }
      }
      
      console.log('üî¨ –¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
      const result = await getQualityLocation(20, 45000); // 20–º —Ç–æ—á–Ω–æ—Å—Ç—å, 45—Å –º–∞–∫—Å–∏–º—É–º
      await handleLocationResult(result);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', error);
      handleLocationError(error as Error);
    } finally {
      setIsLoadingLocation(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  const handleLocationResult = async (result: any) => {
    const { location, accuracyInfo, strategy, timeSpent } = result;
    const { latitude, longitude } = location.coords;
    
    console.log('üéØ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', { 
      latitude, 
      longitude, 
      accuracy: `${accuracyInfo.accuracy.toFixed(0)}–º`,
      strategy,
      level: accuracyInfo.level,
      timeSpent: `${(timeSpent/1000).toFixed(1)}—Å`
    });
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ GPS —É–±—Ä–∞–Ω–∞ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    const isValidLocation = latitude >= 41 && latitude <= 81 && longitude >= 19 && longitude <= 180;
    
    if (!isValidLocation) {
      Alert.alert(
        'üåç –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
        `GPS –æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ ${latitude.toFixed(4)}, ${longitude.toFixed(4)}, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º–æ–π –∑–æ–Ω—ã.`,
        [
          { text: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å', onPress: () => showSavedAddressesFirst() },
          { text: '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é', onPress: () => setShowManualAddressModal(true) },
          { text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑', onPress: getLocationQuality }
        ]
      );
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –∫–∞—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏
    const deltaBasedOnAccuracy = Math.max(0.001, (accuracyInfo.accuracy / 111320) * 2);
    const newRegion = {
      latitude,
      longitude,
      latitudeDelta: deltaBasedOnAccuracy,
      longitudeDelta: deltaBasedOnAccuracy,
    };
    
    setRegion(newRegion);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏
    if (accuracyInfo.level === 'excellent' || accuracyInfo.level === 'good') {
      console.log('‚úÖ –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å GPS, –ø–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å...');
      await reverseGeocode(latitude, longitude);
    } else {
      console.log('üè† –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å GPS, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∞–¥—Ä–µ—Å–∞...');
      await suggestNearbyAddresses(latitude, longitude);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  const handleLocationError = (error: Error) => {
    // –£–±—Ä–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ GPS –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    const errorMessage = error.message;
    if (errorMessage.includes('–≤—Ä–µ–º—è') || errorMessage.includes('timeout')) {
      Alert.alert(
        '‚è±Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ',
        'GPS –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏ –∏–ª–∏ –≤ –º–µ—Å—Ç–µ —Å –ø–ª–æ—Ö–∏–º —Å–∏–≥–Ω–∞–ª–æ–º.',
        [
          { text: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å', onPress: () => showSavedAddressesFirst() },
          { text: '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é', onPress: () => setShowManualAddressModal(true) },
          { text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', onPress: getLocationQuality }
        ]
      );
    } else {
      showSavedAddressesFirst();
    }
  };

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  const showPermissionAlert = () => {
    Alert.alert(
      '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
      '–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.',
      [
        { text: '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', onPress: () => setShowManualAddressModal(true) },
        { text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' }
      ]
    );
  };

  // –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)
  const reverseGeocode = async (latitude: number, longitude: number) => {
    try {
      const googleMapsService = getGoogleMapsService();
      const address = await googleMapsService.reverseGeocode(latitude, longitude);
      
      if (address) {
        setSelectedAddress(address);
        setSearchQuery(address.description);
        return true; // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∞–¥—Ä–µ—Å
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
        return false; // –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:', error);
      return false; // –û—à–∏–±–∫–∞
    }
  };

  // –£–º–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–∏ –Ω–µ—Ç–æ—á–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏  
  const suggestNearbyAddresses = async (latitude: number, longitude: number) => {
    try {
      const googleMapsService = getGoogleMapsService();
      
      // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –≤ —Ä–∞–¥–∏—É—Å–µ
      const nearbyPlaces = await googleMapsService.searchNearbyPlaces(latitude, longitude, 500);
      
      if (nearbyPlaces.length > 0) {
        Alert.alert(
          'üìç –£—Ç–æ—á–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å',
          'GPS –æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤–∞—à–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–¥—Ä–µ—Å:',
          [
            ...nearbyPlaces.slice(0, 3).map((place: Address) => ({
              text: place.description.length > 50 
                ? place.description.substring(0, 50) + '...' 
                : place.description,
              onPress: () => {
                setSelectedAddress(place);
                setSearchQuery(place.description);
              }
            })),
            { text: '–í–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å', onPress: () => setShowManualAddressModal(true) },
            { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' }
          ]
        );
      } else {
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω–æ–µ –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        const addressFound = await reverseGeocode(latitude, longitude);
        
        // –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!addressFound) {
          Alert.alert(
            'üåç –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ—Å—Ç–µ —Å –ø–ª–æ—Ö–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∏–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º–æ–π –∑–æ–Ω—ã.',
            [
              { text: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å', onPress: () => showSavedAddressesFirst() },
              { text: '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é', onPress: () => setShowManualAddressModal(true) },
              { text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑', onPress: getLocationQuality }
            ]
          );
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–∏—Ö –∞–¥—Ä–µ—Å–æ–≤:', error);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
      const addressFound = await reverseGeocode(latitude, longitude);
      
      if (!addressFound) {
        Alert.alert(
          '‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è',
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:',
          [
            { text: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å', onPress: () => showSavedAddressesFirst() },
            { text: '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é', onPress: () => setShowManualAddressModal(true) },
            { text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑', onPress: getLocationQuality }
          ]
        );
      }
    }
  };

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
  const showSavedAddressesFirst = () => {
    if (savedAddresses.length > 0) {
      Alert.alert(
        'üè† –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:',
        [
          ...savedAddresses.slice(0, 2).map(addr => ({
            text: `${addr.title}: ${addr.address.substring(0, 40)}...`,
            onPress: () => handleSelectSavedAddress(addr)
          })),
          { text: '–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å', onPress: () => setShowManualAddressModal(true) },
          { text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å GPS —Å–Ω–æ–≤–∞', onPress: getLocationQuality }
        ]
      );
    } else {
      Alert.alert(
        '–ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.',
        [
          { text: '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å', onPress: () => setShowManualAddressModal(true) },
          { text: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', onPress: getLocationQuality }
        ]
      );
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadSavedAddresses = async () => {
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º supabase –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { supabase } = await import('../../../lib/supabase');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: addresses, error } = await getUserSavedAddresses(user.id);
      
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤:', error);
        return;
      }
      
      setSavedAddresses(addresses || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      setSavedAddresses([]);
    }
  };

  // –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
  const searchAddress = async (query: string) => {
    if (query.trim().length < 3) {
      setSearchResults([]);
      return;
    }
    
    setIsSearching(true);
    
    try {
      const googleMapsService = getGoogleMapsService();
      const results = await googleMapsService.searchPlaces(query, region);
      setSearchResults(results);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–∞:', error);
      Alert.alert(
        '–û—à–∏–±–∫–∞',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      );
    } finally {
      setIsSearching(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  const handleSelectSearchResult = (address: Address) => {
    setSelectedAddress(address);
    setSearchQuery(address.description);
    setSearchResults([]);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
  const handleSelectSavedAddress = (address: SavedAddress) => {
    const selectedAddr: Address = {
      id: address.id,
      description: address.address,
      latitude: address.latitude,
      longitude: address.longitude,
    };
    
    setSelectedAddress(selectedAddr);
    setSearchQuery(address.address);
    setSearchResults([]);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
  const handleManualAddressConfirm = () => {
    if (!manualAddressCity.trim() || !manualAddressStreet.trim() || !manualAddressHouse.trim()) {
      Alert.alert(
        '–ù–µ–ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞'
      );
      return;
    }
    
    const apartmentText = manualAddressApartment.trim() ? `, –∫–≤. ${manualAddressApartment.trim()}` : '';
    const fullAddress = `${manualAddressCity.trim()}, ${manualAddressStreet.trim()}, ${manualAddressHouse.trim()}${apartmentText}`;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ü–µ–Ω—Ç—Ä–∞ –ú–æ—Å–∫–≤—ã (–∑–∞–≥–ª—É—à–∫–∞)
    const manualAddress: Address = {
      id: 'manual',
      description: fullAddress,
      latitude: 55.7558,
      longitude: 37.6176,
    };
    
    setSelectedAddress(manualAddress);
    setSearchQuery(fullAddress);
    setShowManualAddressModal(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
  const handleContinue = () => {
    if (!selectedAddress) {
      Alert.alert(
        '–ê–¥—Ä–µ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.'
      );
      return;
    }
    
    navigation.navigate('OrderDetails', {
      serviceId,
      specialistId,
      address: selectedAddress.description,
      coordinates: {
        latitude: selectedAddress.latitude,
        longitude: selectedAddress.longitude,
      },
    });
  };

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={appTheme.colors.primary} />
        <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
      </View>
    );
  }

  // –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
  const actionsContainer = {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: appTheme.spacing.m,
  };
  
  const actionButton = {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 8,
    padding: appTheme.spacing.s,
    flex: 1,
    backgroundColor: appTheme.colors.primary,
  };

   return (    <View 
      style={[
        styles.container, 
        Platform.OS === 'ios' ? { paddingTop: 60 } : {}
      ]} 
    >
      <View 
        style={[
          styles.headerContainer, 
          Platform.OS === 'ios' ? { marginTop: 20 } : {}
        ]}
      >
        <MaterialCommunityIcons name="map-marker" size={32} color={appTheme.colors.primary} />
        <Text style={styles.headerText}>–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞</Text>
      </View>
      
      {/* –ë–ª–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ */}
      <View style={styles.contentContainer}>
        {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
        <View style={styles.searchContainer}>
          <RNTextInput
            style={styles.searchInput}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å"
            value={searchQuery}
            onChangeText={(text) => {
              setSearchQuery(text);
              searchAddress(text);
            }}
          />
          {searchQuery.length > 0 && (
            <TouchableOpacity
              style={styles.clearButton}
              onPress={() => {
                setSearchQuery('');
                setSearchResults([]);
              }}
            >
              <MaterialCommunityIcons name="close" size={20} color={appTheme.colors.textSecondary} />
            </TouchableOpacity>
          )}
        </View>
        
        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
        {searchResults.length > 0 && (
          <View style={styles.searchResultsContainer}>
            {isSearching ? (
              <ActivityIndicator size="small" color={appTheme.colors.primary} />
            ) : (
              <ScrollView style={styles.searchResultsList}>
                {searchResults.map((result) => (
                  <TouchableOpacity
                    key={result.id}
                    style={styles.searchResultItem}
                    onPress={() => handleSelectSearchResult(result)}
                  >
                    <MaterialCommunityIcons name="map-marker" size={20} color={appTheme.colors.primary} />
                    <Text style={styles.searchResultText}>{result.description}</Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>
            )}
          </View>
        )}
        
        {/* –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ */}
        {searchResults.length === 0 && (
          <View style={styles.savedAddressesContainer}>
            <Text style={styles.sectionTitle}>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞</Text>
            {savedAddresses.map((address) => (
              <TouchableOpacity
                key={address.id}
                style={styles.savedAddressItem}
                onPress={() => handleSelectSavedAddress(address)}
              >
                <MaterialCommunityIcons
                  name={address.isDefault ? 'home' : 'map-marker'}
                  size={24}
                  color={appTheme.colors.primary}
                />
                <View style={styles.savedAddressInfo}>
                  <Text style={styles.savedAddressTitle}>{address.title}</Text>
                  <Text style={styles.savedAddressText}>{address.address}</Text>
                </View>
              </TouchableOpacity>
            ))}
          </View>
        )}
        
        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <View style={styles.actionsContainer}>
          {/* –ö–Ω–æ–ø–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è */}
          <TouchableOpacity
            style={[styles.actionButton, {marginRight: appTheme.spacing.xs}]}
            onPress={getLocationQuick}
            disabled={isLoadingLocation}
          >
            {isLoadingLocation ? (
              <ActivityIndicator size="small" color="white" />
            ) : (
              <>
                <MaterialCommunityIcons name="crosshairs-gps" size={20} color="white" />
                <Text style={styles.actionButtonText}>–ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</Text>
              </>
            )}
          </TouchableOpacity>
          
          {/* –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ */}
          <TouchableOpacity
            style={[styles.actionButton, {marginLeft: appTheme.spacing.xs}]}
            onPress={() => setShowManualAddressModal(true)}
          >
            <MaterialCommunityIcons name="pencil" size={20} color="white" />
            <Text style={styles.actionButtonText}>–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é</Text>
          </TouchableOpacity>
        </View>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ GPS —É–±—Ä–∞–Ω–∞ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        
        {/* –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å */}
        {selectedAddress && (
          <View style={styles.selectedAddressContainer}>
            <Text style={styles.sectionTitle}>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å</Text>
            <View style={styles.selectedAddressContent}>
              <MaterialCommunityIcons name="check-circle" size={24} color={appTheme.colors.primary} />
              <Text style={styles.selectedAddressText}>{selectedAddress.description}</Text>
            </View>
          </View>
        )}
        
        {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */}
        <Button
          mode="contained"
          onPress={handleContinue}
          style={styles.continueButton}
          disabled={!selectedAddress}
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        </Button>
      </View>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ */}
      <Portal>
        <Modal
          visible={showManualAddressModal}
          onDismiss={() => setShowManualAddressModal(false)}
          contentContainerStyle={styles.modalContainer}
        >
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>–í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –≤—Ä—É—á–Ω—É—é</Text>
            <TouchableOpacity onPress={() => setShowManualAddressModal(false)}>
              <MaterialCommunityIcons name="close" size={24} color={appTheme.colors.textSecondary} />
            </TouchableOpacity>
          </View>
          
          <View style={styles.modalInputContainer}>
            <Text style={styles.modalInputLabel}>–ì–æ—Ä–æ–¥</Text>
            <RNTextInput
              style={styles.modalInput}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥"
              value={manualAddressCity}
              onChangeText={setManualAddressCity}
            />
          </View>
          
          <View style={styles.modalInputContainer}>
            <Text style={styles.modalInputLabel}>–£–ª–∏—Ü–∞</Text>
            <RNTextInput
              style={styles.modalInput}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É"
              value={manualAddressStreet}
              onChangeText={setManualAddressStreet}
            />
          </View>
          
          <View style={styles.modalRowContainer}>
            <View style={[styles.modalInputContainer, {flex: 1, marginRight: appTheme.spacing.s}]}>
              <Text style={styles.modalInputLabel}>–î–æ–º</Text>
              <RNTextInput
                style={styles.modalInput}
                placeholder="–ù–æ–º–µ—Ä –¥–æ–º–∞"
                value={manualAddressHouse}
                onChangeText={setManualAddressHouse}
              />
            </View>
            
            <View style={[styles.modalInputContainer, {flex: 1, marginLeft: appTheme.spacing.s}]}>
              <Text style={styles.modalInputLabel}>–ö–≤–∞—Ä—Ç–∏—Ä–∞/–æ—Ñ–∏—Å</Text>
              <RNTextInput
                style={styles.modalInput}
                placeholder="–ù–æ–º–µ—Ä"
                value={manualAddressApartment}
                onChangeText={setManualAddressApartment}
              />
            </View>
          </View>
          
          <Button
            mode="contained"
            onPress={handleManualAddressConfirm}
            style={styles.modalConfirmButton}
          >
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥—Ä–µ—Å
          </Button>
        </Modal>
      </Portal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: appTheme.colors.background,
    paddingTop: Platform.OS === 'ios' ? 60 : 0, // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–∏–π –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è iOS
  },
  headerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: appTheme.spacing.m,
    backgroundColor: appTheme.colors.surface,
    borderBottomWidth: 1,
    borderBottomColor: appTheme.colors.border,
    marginTop: Platform.OS === 'ios' ? 20 : 0, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞ iOS
  },
  headerText: {
    fontSize: 18,
    fontWeight: 'bold',
    marginLeft: appTheme.spacing.s,
  },
  contentContainer: {
    flex: 1,
    padding: appTheme.spacing.m,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: appTheme.colors.surface,
    borderRadius: 8,
    paddingHorizontal: appTheme.spacing.m,
    marginBottom: appTheme.spacing.m,
  },
  searchInput: {
    flex: 1,
    height: 50,
    fontSize: 16,
  },
  clearButton: {
    padding: appTheme.spacing.xs,
  },
  searchResultsContainer: {
    backgroundColor: appTheme.colors.background,
    borderRadius: 8,
    marginBottom: appTheme.spacing.m,
    maxHeight: 200,
  },
  searchResultsList: {
    maxHeight: 200,
  },
  searchResultItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: appTheme.spacing.s,
    paddingHorizontal: appTheme.spacing.m,
    borderBottomWidth: 1,
    borderBottomColor: appTheme.colors.border,
  },
  searchResultText: {
    marginLeft: appTheme.spacing.s,
    flex: 1,
  },
  savedAddressesContainer: {
    marginBottom: appTheme.spacing.m,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: appTheme.spacing.s,
  },
  savedAddressItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: appTheme.spacing.m,
    borderBottomWidth: 1,
    borderBottomColor: appTheme.colors.border,
  },
  savedAddressInfo: {
    marginLeft: appTheme.spacing.m,
    flex: 1,
  },
  savedAddressTitle: {
    fontWeight: 'bold',
    marginBottom: 4,
  },
  savedAddressText: {
    color: appTheme.colors.textSecondary,
  },
  actionsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: appTheme.spacing.m,
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 8,
    padding: appTheme.spacing.s,
    flex: 1,
    backgroundColor: appTheme.colors.primary,
  },
  actionButtonText: {
    color: 'white',
    marginLeft: appTheme.spacing.s,
    fontWeight: 'bold',
    fontSize: 12,
  },
  selectedAddressContainer: {
    marginBottom: appTheme.spacing.m,
    backgroundColor: appTheme.colors.surface,
    borderRadius: 8,
    padding: appTheme.spacing.m,
  },
  selectedAddressContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  selectedAddressText: {
    marginLeft: appTheme.spacing.s,
    flex: 1,
  },
  continueButton: {
    marginTop: appTheme.spacing.m,
    paddingVertical: appTheme.spacing.xs,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: appTheme.spacing.m,
    color: appTheme.colors.textSecondary,
  },
  modalContainer: {
    backgroundColor: 'white',
    padding: appTheme.spacing.m,
    margin: appTheme.spacing.m,
    borderRadius: 8,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: appTheme.spacing.m,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  modalInputContainer: {
    marginBottom: appTheme.spacing.m,
  },
  modalInputLabel: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: appTheme.spacing.xs,
    color: appTheme.colors.textSecondary,
  },
  modalInput: {
    backgroundColor: appTheme.colors.surface,
    borderRadius: 8,
    paddingHorizontal: appTheme.spacing.m,
    paddingVertical: appTheme.spacing.s,
    fontSize: 16,
  },
  modalRowContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: appTheme.spacing.m,
  },
  modalConfirmButton: {
    marginTop: appTheme.spacing.s,
  },
});

export default OrderAddressScreen; 