import React from 'react';
import { View, StyleSheet } from 'react-native';
import { SvgXml } from 'react-native-svg';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';

// –¢–∏–ø—ã –∏–∫–æ–Ω–æ–∫
export type IconType = 'category' | 'navigation' | 'ui' | 'material';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–ø—Å–æ–≤
interface IconProps {
  name: string;
  type?: IconType;
  size?: number;
  color?: string;
  style?: any;
}

// –ò–º–ø–æ—Ä—Ç—ã SVG –∏–∫–æ–Ω–æ–∫
import { 
  categoryIconsMap, 
  navigationIconsMap, 
  uiIconsMap,
  fallbackIcons 
} from '../../utils/iconLoader';

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∫–æ–Ω–∫–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ SVG –∏–∫–æ–Ω–∫–∏, —Ç–∞–∫ –∏ MaterialCommunityIcons
 */
const Icon: React.FC<IconProps> = ({ 
  name, 
  type = 'material', 
  size = 24, 
  color = '#000000',
  style 
}) => {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SVG –∏–∫–æ–Ω–∫–∏
  const getSvgIcon = (iconName: string, iconType: IconType): string | null => {
    console.log(`üîç Looking for icon: ${iconName} (${iconType})`);
    let result = null;
    switch (iconType) {
      case 'category':
        result = categoryIconsMap[iconName] || null;
        break;
      case 'navigation':
        result = navigationIconsMap[iconName] || null;
        console.log(`üìã Navigation icons available:`, Object.keys(navigationIconsMap));
        break;
      case 'ui':
        result = uiIconsMap[iconName] || null;
        break;
      default:
        result = null;
    }
    console.log(`üéØ Icon result for ${iconName}:`, result ? 'FOUND' : 'NOT FOUND');
    return result;
  };

  // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏–∫–æ–Ω–∫–∞
  if (type !== 'material') {
    const svgContent = getSvgIcon(name, type);
    
    if (svgContent) {
      // –ó–∞–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ SVG
      const coloredSvg = svgContent
        .replace(/currentColor/g, color)
        .replace(/#000000/g, color)
        .replace(/fill="[^"]*"/g, `fill="${color}"`)
        .replace(/stroke="[^"]*"/g, `stroke="${color}"`);

      console.log(`‚úÖ Loading SVG icon: ${name} (${type})`);
      return (
        <View style={[{ width: size, height: size }, style]}>
          <SvgXml 
            xml={coloredSvg} 
            width={size} 
            height={size} 
          />
        </View>
      );
    }
    
    // –ï—Å–ª–∏ SVG –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback MaterialCommunityIcons
    console.warn(`‚ùå SVG icon "${name}" of type "${type}" not found. Using fallback.`);
  }

  // –ü–æ–ª—É—á–∞–µ–º fallback –∏–∫–æ–Ω–∫—É
  const getFallbackIcon = (iconName: string, iconType: IconType): string => {
    const fallbackMap = fallbackIcons[iconType as keyof typeof fallbackIcons];
    return (fallbackMap as any)?.[iconName] || 'help-circle-outline';
  };

  // Fallback –Ω–∞ MaterialCommunityIcons
  const fallbackIconName = type !== 'material' ? getFallbackIcon(name, type) : name;
  
  return (
    <MaterialCommunityIcons 
      name={fallbackIconName as any} 
      size={size} 
      color={color} 
      style={style}
    />
  );
};

export default Icon; 